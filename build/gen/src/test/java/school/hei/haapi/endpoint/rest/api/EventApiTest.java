/*
 * HEI Admin API
 * _Programmatically connect to a computer programming [school](https://hei.school)._ After [joining us](mailto:contact@hei.school), you can get an identification token from our [dev](https://dev-hei-admin.auth.eu-west-3.amazoncognito.com/oauth2/authorize?client_id=5s8cg50doahmu855rlc8fr6qmp&response_type=token&scope=email+openid&redirect_uri=https%3A%2F%2Fapi-dev.hei.school%2Fwhoami) or [prod](https://prod-hei-admin.auth.eu-west-3.amazoncognito.com/oauth2/authorize?client_id=i8bg538jpfu6mqmqb61m26trd&response_type=token&scope=email+openid&redirect_uri=https%3A%2F%2Fapi-prod.hei.school%2Fwhoami) authentication service. Then, start playing with our system!  The implementation of our API is [publicly disclosed](https://github.com/hei-school/hei-admin-api). You are welcome to try and compromise it. Happy hacking! 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package school.hei.haapi.endpoint.rest.api;

import school.hei.haapi.endpoint.rest.client.ApiException;
import school.hei.haapi.endpoint.rest.model.BadRequestException;
import school.hei.haapi.endpoint.rest.model.CreateEvent;
import school.hei.haapi.endpoint.rest.model.Event;
import school.hei.haapi.endpoint.rest.model.EventParticipant;
import school.hei.haapi.endpoint.rest.model.InternalServerException;
import school.hei.haapi.endpoint.rest.model.NotAuthorizedException;
import school.hei.haapi.endpoint.rest.model.Place;
import school.hei.haapi.endpoint.rest.model.ResourceNotFoundException;
import school.hei.haapi.endpoint.rest.model.TooManyRequestsException;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for EventApi
 */
@Ignore
public class EventApiTest {

    private final EventApi api = new EventApi();

    
    /**
     * Create new event event_participants
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createEventEventParticipantsTest() throws ApiException {
        String eventId = null;
        List<Event> event = null;
        List<EventParticipant> response = 
        api.createEventEventParticipants(eventId, event);
        
        // TODO: test validations
    }
    
    /**
     * Create new events or update existing events
     *
     * Update events when id are provided, create them otherwise.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrUpdateEventsTest() throws ApiException {
        List<CreateEvent> createEvent = null;
        List<CreateEvent> response = 
        api.createOrUpdateEvents(createEvent);
        
        // TODO: test validations
    }
    
    /**
     * Create new places or update existing places
     *
     * Update places when id are provided, create them otherwise.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrUpdatePlacesTest() throws ApiException {
        List<Place> place = null;
        List<Place> response = 
        api.createOrUpdatePlaces(place);
        
        // TODO: test validations
    }
    
    /**
     * Get event by identifier
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventByIdTest() throws ApiException {
        String id = null;
        Event response = 
        api.getEventById(id);
        
        // TODO: test validations
    }
    
    /**
     * Get event event_participant by identifier
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventEventParticipantByIdTest() throws ApiException {
        String eventId = null;
        String eventParticipantId = null;
        EventParticipant response = 
        api.getEventEventParticipantById(eventId, eventParticipantId);
        
        // TODO: test validations
    }
    
    /**
     * Get all event event_participants
     *
     * Event participants can be filtered with an optional status parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventEventParticipantsTest() throws ApiException {
        String eventId = null;
        Integer page = null;
        Integer pageSize = null;
        String status = null;
        List<EventParticipant> response = 
        api.getEventEventParticipants(eventId, page, pageSize, status);
        
        // TODO: test validations
    }
    
    /**
     * Get all event event_participants filtered by status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventParticipantsTest() throws ApiException {
        String status = null;
        Integer page = null;
        Integer pageSize = null;
        List<EventParticipant> response = 
        api.getEventParticipants(status, page, pageSize);
        
        // TODO: test validations
    }
    
    /**
     * Get all events order by starting_hours
     *
     * Update students when &#x60;id&#x60; are provided, create them otherwise.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventsTest() throws ApiException {
        Integer page = null;
        Integer pageSize = null;
        List<Event> response = 
        api.getEvents(page, pageSize);
        
        // TODO: test validations
    }
    
    /**
     * Get place by identifier
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlaceByIdTest() throws ApiException {
        String id = null;
        Place response = 
        api.getPlaceById(id);
        
        // TODO: test validations
    }
    
    /**
     * Get all places
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlacesTest() throws ApiException {
        List<Place> response = 
        api.getPlaces();
        
        // TODO: test validations
    }
    
    /**
     * Update existing event event_participants
     *
     * Update event event_participants when id are provided, create them otherwise.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEventEventParticipantsTest() throws ApiException {
        String eventId = null;
        List<EventParticipant> eventParticipant = null;
        List<EventParticipant> response = 
        api.updateEventEventParticipants(eventId, eventParticipant);
        
        // TODO: test validations
    }
    
}
